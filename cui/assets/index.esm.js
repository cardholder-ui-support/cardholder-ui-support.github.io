/**
 * Cardholder UI Web Components v0.22.0
 * (c) 2024 Marqeta
 * @license MIT
 */
export{d as getAssetPath,e as setAssetPath}from"./p-18a64bdb.js";export{b as bootstrap,m as mswWorker}from"./p-d8241bab.js";export{d as dispose,m as mqState,o as onMqCuiReady,r as reset,s as state,a as store}from"./p-c7bc8265.js";import"./p-675e89df.js";import"./p-0462f723.js";const t="0.22.0";const n=["mqAccountActionCompleted","mqAccountActionHook","mqAccountActionTriggered","mqAccountLoadCompleted","mqAccountLoadInitiated"];const i=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqAccountLoadInitiated**</td><td valign="top">Emitted when the component is connected to the DOM</td><td></td></tr>\n  <tr><td rowspan="2" valign="top">**mqAccountLoadCompleted**</td><td valign="top">Emitted when the component has returned account data</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when the component failed to retrieve account data</td><td>**status**: ERROR<br>**error?.code**: a unique identifier for the specific error<br>**error?.message**: a human-readable message describing the error</td></tr>\n  <tr><td rowspan="1" valign="top">**mqAccountActionTriggered**</td><td valign="top">Emitted when the ViewDetails modal has began to load</td><td>**type**: VIEW_ACCOUNT_DETAILS</td></tr>\n  <tr><td rowspan="2" valign="top">**mqAccountActionCompleted**</td><td valign="top">Emitted when the ViewDetails modal has loaded successfully</td><td>**type**: VIEW_ACCOUNT_DETAILS:<br>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when the ViewDetails modal has failed to load</td><td>**type**: VIEW_ACCOUNT_DETAILS:<br>**status**: ERROR<br>**error.code**: a unique identifier for the specific error</td></tr>\n  <tr><td rowspan="2" valign="top">**mqAccountActionHook**</td><td valign="top">Emitted when Add Money button is triggered</td><td>**type**: ADD_MONEY</td></tr>\n  <tr><td valign="top">Emitted when Link Card button is triggered</td><td>**type**: LINK_CARD</td></tr>\n  </table>\n`;const c=["mqActivateCardActionCompleted","mqActivateCardActionHook","mqActivateCardActionTriggered","mqActivateCardLoadCompleted","mqActivateCardLoadInitiated"];const h=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqActivateCardLoadInitiated**</td><td valign="top">Emitted when the activate card component is connected to the DOM</td><td>**data.cardToken**: a unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqActivateCardLoadCompleted**</td><td valign="top">Emitted when the component has loaded and rendered successfully</td><td>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td valign="top">Emitted when the component has failed to load or render</td><td>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqActivateCardActionTriggered**</td><td valign="top">Emitted when the activate card submission is triggered</td><td>**type**: ACTIVATE<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqActivateCardActionCompleted**</td><td valign="top">Emitted when the activate card submission has completed successfully</td><td>**type**: ACTIVATE<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td valign="top">Emitted when the activate card submission has failed</td><td>**type**: ACTIVATE<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqActivateCardActionHook**</td><td valign="top">Emitted when the Done button is triggered on the Success screen</td><td>**type**: SUCCESS_DONE<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  <tr><td valign="top">Emitted when the Done button is triggered on the Error screen</td><td>**type**: ERROR_DONE<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  </table>\n`;const p=["mqCardActionCompleted","mqCardActionTriggered","mqCardLoadCompleted","mqCardLoadInitiated"];const l=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqCardLoadInitiated**</td><td valign="top">Emitted when card component starts to load.</td><td>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqCardLoadCompleted**</td><td valign="top">Emitted when the card loads successfully</td><td>**status**: SUCCESS<br>**data.cardType**: The type of the card<br>**data.cardToken**: the token of the card in question</td></tr>\n  <tr><td valign="top">Emitted when the card fails to load</td><td>**status**: ERROR<br>**error.code**: the unique identifier for the specific error<br>**error.message**: a human-readable description of the error<br>**data.cardType**: The type of the card<br>**data.cardToken**: the token of the card in question</td></tr>\n  <tr><td rowspan="5" valign="top">**mqCardActionTriggered**</td><td valign="top">Emitted when the button to show card front has been triggered</td><td>**type**: SHOW_FRONT<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the button to show card back has been triggered</td><td>**type**: SHOW_BACK<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the button to add PAN to clipboard has been triggered</td><td>**type**: COPY_PAN<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the button to add Expiration to clipboard has been triggered</td><td>**type**: COPY_EXP<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the button to add CVV to clipboard has been triggered</td><td>**type**: COPY_CVV<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td rowspan="10" valign="top">**mqCardActionCompleted**</td><td valign="top">Emitted when the front of the card is successfully shown</td><td>**type**: SHOW_FRONT<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the front of the card fails to show</td><td>**type**: SHOW_FRONT<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the back of the card is successfully shown</td><td>**type**: SHOW_BACK<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the back of the card fails to show</td><td>**type**: SHOW_BACK<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the PAN of the card is successfully added to clipboard</td><td>**type**: COPY_PAN<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the PAN of the card fails to be added to clipboard</td><td>**type**: COPY_PAN<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the Expiration of the card is successfully added to clipboard</td><td>**type**: COPY_EXP<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the Expiration of the card fails to be added to clipboard</td><td>**type**: COPY_EXP<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the CVV of the card is successfully added to clipboard</td><td>**type**: COPY_CVV<br>**status**: SUCCESS<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  <tr><td valign="top">Emitted when the CVV of the card fails to be added to clipboard</td><td>**type**: COPY_CVV<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: A unique identifier for the card<br>**data.cardType**: The type of the card</td></tr>\n  </table>\n`;const u=["mqCardActionsInit","mqCardActionsLoadError","mqCardActionsLoadSuccess","mqCardActionsLockCardError","mqCardActionsLockCardSuccess","mqCardActionsSelectActionError","mqCardActionsSelectActionSuccess","mqCardActionsSelectActionTriggered","mqCardActionsUnlockCardError","mqCardActionsUnlockCardSuccess"];const g=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqCardActionsInit**</td><td valign="top">Emitted when the component is connected to the DOM</td><td>**cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsLoadError**</td><td valign="top">Emitted when card actions fail to load</td><td>**cardToken**: The unique identifier for the card<br>**errorCode**: A human-readable code representing the error that was encountered</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsLoadSuccess**</td><td valign="top">Emitted when card actions load successfully</td><td>**cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsLockCardError**</td><td valign="top">Emitted when a card fails to lock</td><td>**errorCode**: A human-readable code representing the error that was encountered</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsLockCardSuccess**</td><td valign="top">Emitted when a card is locked successfully</td><td>**cardToken**: The unique identifier for the card<br>**userToken**: The unique identifier for the user<br>**programShortCode**: The short code representing the program associated with the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsSelectActionError**</td><td valign="top">Emitted when a card action event is triggered unsuccessfully</td><td>**cardToken**: The unique identifier for the card<br>**errorCode**: A human-readable code representing the error that was encountered</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsSelectActionSuccess**</td><td valign="top">Emitted when a card action event is triggered successfully</td><td>**cardToken**: The unique identifier for the card<br>**userToken**: The unique identifier for the user<br>**programShortCode**: The short code representing the program associated with the card<br>**actionId**: The unique identifier of the card action<br>**actionType**: The type of action</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsSelectActionTriggered**</td><td valign="top">Emitted when a card action event is triggered</td><td>**cardToken**: The unique identifier for the card<br>**userToken**: The unique identifier for the user<br>**programShortCode**: The short code representing the program associated with the card<br>**actionId**: The unique identifier of the card action<br>**actionType**: The type of action</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsUnlockCardError**</td><td valign="top">Emitted when a card fails to unlock</td><td>**errorCode**: A human-readable code representing the error that was encountered</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardActionsUnlockCardSuccess**</td><td valign="top">Emitted when a card is unlocked successfully</td><td>**cardToken**: The unique identifier for the card<br>**userToken**: The unique identifier for the user<br>**programShortCode**: The short code representing the program associated with the card</td></tr>\n  </table>\n`;const f=["mqCardListActionHook","mqCardListLoadCompleted","mqCardListLoadInitiated"];const E=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqCardListLoadInitiated**</td><td valign="top">Emitted when the component is connected to the DOM</td><td></td></tr>\n  <tr><td rowspan="2" valign="top">**mqCardListLoadCompleted**</td><td valign="top">Emitted when the component finishes loading successfully</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when the component fails to load</td><td>**status**: ERROR<br>**error.code**: a unique identifier for the error</td></tr>\n  <tr><td rowspan="1" valign="top">**mqCardListActionHook**</td><td valign="top">Emitted when one of the cards has been selected</td><td>**type**: CARD_SELECTED<br>**cardToken**: The unique identifier for the card being selected</td></tr>\n  </table>\n`;const v=["mqExternalAccountListActionCompleted","mqExternalAccountListActionHook","mqExternalAccountListActionTriggered","mqExternalAccountListLoadCompleted","mqExternalAccountListLoadInitiated"];const C=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqExternalAccountListLoadInitiated**</td><td valign="top">Emitted when external account list component starts to load.</td><td></td></tr>\n  <tr><td rowspan="2" valign="top">**mqExternalAccountListLoadCompleted**</td><td valign="top">Emitted when the "Linked Accounts" are loaded correctly</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when the "Linked Accounts" fails to load</td><td>**status**: ERROR<br>**error.code**: the unique identifier for the specific error<br>**error.message**: a human-readable description of the error</td></tr>\n  <tr><td rowspan="1" valign="top">**mqExternalAccountListActionTriggered**</td><td valign="top">Emitted when unlink card is triggered</td><td>**type**: UNLINK_CARD<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqExternalAccountListActionCompleted**</td><td valign="top">Emitted when unlink card is completed successfully</td><td>**type**: UNLINK_CARD<br>**status**: SUCCESS<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td valign="top">Emitted when unlink card results in failure</td><td>**type**: UNLINK_CARD<br>**status**: ERROR<br>**error.code**: the unique identifier for the specific error<br>**error.message**: a human-readable description of the error<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqExternalAccountListActionHook**</td><td valign="top">Emitted when done button is clicked from error view</td><td>**type**: ERROR_DONE</td></tr>\n  <tr><td valign="top">Emitted when Add Linked Account is clicked from normal view</td><td>**type**: LINK_CARD</td></tr>\n  </table>\n`;const T=["mqFileDisputeActionCompleted","mqFileDisputeActionHook","mqFileDisputeActionTriggered","mqFileDisputeLoadCompleted","mqFileDisputeLoadInitiated"];const A=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqFileDisputeLoadInitiated**</td><td valign="top">Emitted when file dispute component starts to load.</td><td></td></tr>\n  <tr><td rowspan="2" valign="top">**mqFileDisputeLoadCompleted**</td><td valign="top">Emitted when file dispute component finishes loading successfully</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when file dispute component fails to load</td><td>**status**: Error<br>**error.code**: a unique code identifying the specific error</td></tr>\n  <tr><td rowspan="1" valign="top">**mqFileDisputeActionTriggered**</td><td valign="top">Emitted when dispute submit is triggered</td><td>**type**: DISPUTE_SUBMISSION<br>**data.transactionToken**: The unique identifier for the transaction</td></tr>\n  <tr><td rowspan="2" valign="top">**mqFileDisputeActionCompleted**</td><td valign="top">Emitted when dispute submission is completed</td><td>**type**: DISPUTE_SUBMISSION<br>**status**: SUCCESS<br>**data.transactionToken**: The unique identifier for the transaction</td></tr>\n  <tr><td valign="top">Emitted when a dispute submission fails</td><td>**type**: DISPUTE_SUBMISSION<br>**status**: ERROR<br>**error.code**: a unique code identifying the specific error<br>**error.message**: a human-readable description of the error<br>**data.transactionToken**: The unique identifier for the transaction</td></tr>\n  <tr><td rowspan="2" valign="top">**mqFileDisputeActionHook**</td><td valign="top">Emitted when done button is clicked on success view</td><td>**type**: SUCCESS_DONE<br>**data.transactionToken**: The unique identifier for the transaction</td></tr>\n  <tr><td valign="top">Emitted when done button is clicked on error view</td><td>**type**: ERROR_DONE<br>**data.transactionToken**: The unique identifier for the transaction</td></tr>\n  </table>\n`;const q=["mqLinkExternalCardActionCompleted","mqLinkExternalCardActionHook","mqLinkExternalCardActionTriggered","mqLinkExternalCardLoadCompleted","mqLinkExternalCardLoadInitiated"];const w=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqLinkExternalCardLoadInitiated**</td><td valign="top">Fired when component is mounted.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqLinkExternalCardLoadCompleted**</td><td valign="top">Fired when component is finished Rendering;</td><td>**status**: SUCCESS</td></tr>\n  <tr><td rowspan="1" valign="top">**mqLinkExternalCardActionTriggered**</td><td valign="top">Emitted when the add link account submission is triggered</td><td>**type**: LINK_ACCOUNT</td></tr>\n  <tr><td rowspan="2" valign="top">**mqLinkExternalCardActionCompleted**</td><td valign="top">Emitted when the add link account submission returns successful</td><td>**type**: LINK_ACCOUNT<br>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when the add link account submission fails</td><td>**type**: LINK_ACCOUNT<br>**status**: ERROR</td></tr>\n  <tr><td rowspan="1" valign="top">**mqLinkExternalCardActionHook**</td><td valign="top">Emitted when the \`Done\` button is triggered</td><td>**type**: SUCCESS_DONE</td></tr>\n  </table>\n`;const S=["mqOnboardAccountHolderActionCompleted","mqOnboardAccountHolderActionHook","mqOnboardAccountHolderActionTriggered","mqOnboardAccountHolderLoadCompleted","mqOnboardAccountHolderLoadInitiated"];const R=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqOnboardAccountHolderLoadInitiated**</td><td valign="top">Emitted when the KYC onboarding process is initiated.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqOnboardAccountHolderLoadCompleted**</td><td valign="top">Emitted when the KYC onboarding component has finished loading and is connected to the DOM.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqOnboardAccountHolderActionTriggered**</td><td valign="top">Emitted when a user action (e.g., form submission) is triggered.</td><td>**type**: The action type triggered.</td></tr>\n  <tr><td rowspan="1" valign="top">**mqOnboardAccountHolderActionCompleted**</td><td valign="top">Emitted when a user action (e.g., form submission) is completed.</td><td>**type**: The action type triggered.</td></tr>\n  <tr><td rowspan="1" valign="top">**mqOnboardAccountHolderActionHook**</td><td valign="top">Emitted to hook into the action lifecycle, signaling completion of specific steps (e.g., success or error).</td><td>**type**: The action type triggered..</td></tr>\n  </table>\n`;const L=["mqReplaceCardActionCompleted","mqReplaceCardActionHook","mqReplaceCardActionTriggered","mqReplaceCardLoadCompleted","mqReplaceCardLoadInitiated"];const y=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqReplaceCardLoadInitiated**</td><td valign="top">Emitted when replace card component starts to load.</td><td>**data.cardToken**: The unique identifier for the transaction</td></tr>\n  <tr><td rowspan="2" valign="top">**mqReplaceCardLoadCompleted**</td><td valign="top">Emitted when replace card is loaded successfully</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when loading replace card has failed</td><td>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error</td></tr>\n  <tr><td rowspan="1" valign="top">**mqReplaceCardActionTriggered**</td><td valign="top">Emitted when Replace Card button is triggered</td><td>**type**: REPLACE_CARD<br>**data.cardToken**: The unique identifier for the transaction<br>**data.isPhysical**: an indication of whether or not the card is a physical card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqReplaceCardActionCompleted**</td><td valign="top">Emitted when replace card is completed successfully</td><td>**type**: REPLACE_CARD<br>**status**: SUCCESS<br>**data.cardToken**: The unique identifier for the transaction<br>**data.isPhysical**: an indication of whether or not the card is a physical card</td></tr>\n  <tr><td valign="top">Emitted when replace card has failed</td><td>**type**: REPLACE_CARD<br>**status**: ERROR<br>**error.code**: A unique identifier for the error<br>**error?.message**: A human-readable message describing the error<br>**data.cardToken**: The unique identifier for the transaction<br>**data.isPhysical**: an indication of whether or not the card is a physical card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqReplaceCardActionHook**</td><td valign="top">Emitted when the Done button is triggered on the success view</td><td>**type**: SUCCESS_DONE</td></tr>\n  <tr><td valign="top">Emitted when the Done button is triggered on the error view</td><td>**type**: ERROR_DONE<br>**data.cardToken**: The unique identifier for the transaction<br>**data.isPhysical**: an indication of whether or not the card is a physical card</td></tr>\n  </table>\n`;const k=["mqRevealPinActionCompleted","mqRevealPinActionTriggered","mqRevealPinLoadCompleted","mqRevealPinLoadInitiated"];const O=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqRevealPinLoadInitiated**</td><td valign="top">Emitted when Reveal Pin component starts to load.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqRevealPinLoadCompleted**</td><td valign="top">Emitted when Reveal Pin component finishes loading.</td><td>**status**: ERROR or SUCCESS<br>**error**: An error object with code and message if status is 'error'</td></tr>\n  <tr><td rowspan="1" valign="top">**mqRevealPinActionTriggered**</td><td valign="top">Emitted when Reveal Pin is triggered</td><td>**type**: REVEAL_PIN<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqRevealPinActionCompleted**</td><td valign="top">Emitted when Reveal Pin or Hide Pin is completed</td><td>**type**: REVEAL_PIN or HIDE_PIN<br>**data.cardToken**: The unique identifier for the card<br>**status**: ERROR or SUCCESS<br>**error**: An error object with code and message if status is 'error'</td></tr>\n  </table>\n`;const D=["mqSetPinActionCompleted","mqSetPinActionHook","mqSetPinActionTriggered","mqSetPinLoadCompleted","mqSetPinLoadInitiated"];const I=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqSetPinLoadInitiated**</td><td valign="top">Emitted when Set PIN component starts to load.</td><td></td></tr>\n  <tr><td rowspan="2" valign="top">**mqSetPinLoadCompleted**</td><td valign="top">Emitted when Set PIN component finishes loading</td><td>**status**: SUCCESS</td></tr>\n  <tr><td valign="top">Emitted when Set PIN component fails to load</td><td>**status**: ERROR<br>**error.code**: The unique identifier for the specific event</td></tr>\n  <tr><td rowspan="1" valign="top">**mqSetPinActionTriggered**</td><td valign="top">Emitted when Set PIN is triggered</td><td>**type**: SET_PIN<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="2" valign="top">**mqSetPinActionCompleted**</td><td valign="top">Emitted when Set PIN is completed successfully</td><td>**type**: SET_PIN<br>**status**: SUCCESS<br>**data.lastFour**: the last 4 numbers of the card PAN<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td valign="top">Emitted when Set PIN fails</td><td>**type**: SET_PIN<br>**status**: ERROR<br>**error.code**: The unique identifier for the specific error<br>**error.message**: A human-readable description of the error<br>**data.cardToken**: The unique identifier for the card</td></tr>\n  <tr><td rowspan="1" valign="top">**mqSetPinActionHook**</td><td valign="top">Emitted when done button is clicked from success view</td><td>**type**: SUCCESS_DONE<br>**data.cardToken**: A unique identifier for the card</td></tr>\n  </table>\n`;const N=["mqStatementListActionCompleted","mqStatementListActionTriggered","mqStatementListLoadCompleted","mqStatementListLoadInitiated","mqStatementsActionTriggered"];const P=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqStatementListLoadInitiated**</td><td valign="top">Emitted when the component is connected to the DOM</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqStatementListLoadCompleted**</td><td valign="top">Emitted when the component has returned account data</td><td>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqStatementListActionTriggered**</td><td valign="top">Emitted when the statements list load is trigerred</td><td>**type**: "LOAD_MORE_STATEMENTS_LIST"<br>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqStatementListActionCompleted**</td><td valign="top">Emitted when statements list is load request succeeds or fails</td><td>**type**: "LOAD_MORE_STATEMENTS_LIST"<br>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqStatementsActionTriggered**</td><td valign="top">Emitted when the statements list download is trigerred</td><td>**type**: "DOWNLOAD_STATEMENTS_LIST"<br>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  </table>\n`;const _=["mqTransactionHook","mqTransactionLoadCompleted","mqTransactionLoadInitiated"];const U=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqTransactionLoadInitiated**</td><td valign="top">Fired when component is mounted.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionLoadCompleted**</td><td valign="top">Fired when component is done with all network requests for initial view.</td><td>**status**: "SUCCESS" | "ERROR"<br>**data.transactionToken**: string // The token for the transaction<br>**?error.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionHook**</td><td valign="top">Emitted when a hook is triggered</td><td>**type**: "REPORT_A_PROBLEM"<br>**data.transactionToken**: string // The token for the transaction</td></tr>\n  </table>\n`;const H=["mqTransactionListActionCompleted","mqTransactionListActionTriggered","mqTransactionListHook","mqTransactionListLoadCompleted","mqTransactionListLoadInitiated"];const x=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqTransactionListLoadInitiated**</td><td valign="top">Fired when component is mounted.</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionListLoadCompleted**</td><td valign="top">Fired when component is done with all network requests for initial view.</td><td>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionListActionTriggered**</td><td valign="top">Emitted when a TransactionList action is triggered</td><td>**type**: "LOAD_MORE"</td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionListActionCompleted**</td><td valign="top">Emitted when a TransactionList action is completed</td><td>**type**: "LOAD_MORE"<br>**status**: "SUCCESS" | "ERROR"<br>**error?.code**: string // The error code if an error exists</td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransactionListHook**</td><td valign="top">Emitted when a hook is triggered</td><td>**type**: "VIEW_TRANSACTION_DETAILS"<br>**data.transactionToken**: string // The token for the transaction</td></tr>\n  </table>\n`;const F=["mqTransferFundsActionCompleted","mqTransferFundsActionHook","mqTransferFundsActionTriggered","mqTransferFundsLoadCompleted","mqTransferFundsLoadInitiated"];const V=`\n  <table>\n  <thead><tr><th>Event Name</th><th>Description</th><th>Event Details</th></tr><thead>\n  <tr><td rowspan="1" valign="top">**mqTransferFundsLoadInitiated**</td><td valign="top">Emitted when the component is connected to the DOM</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransferFundsLoadCompleted**</td><td valign="top">Emitted when the component is loaded successfully</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransferFundsActionTriggered**</td><td valign="top">Emitted when \`Add $x button\` is clicked</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransferFundsActionCompleted**</td><td valign="top">Emitted when fund transfer request succeeds or fails</td><td></td></tr>\n  <tr><td rowspan="1" valign="top">**mqTransferFundsActionHook**</td><td valign="top">Emitted when \`Done\` button is triggered on Funds Transfer success or failure</td><td></td></tr>\n  </table>\n`;const M=t;export{n as mqAccountEventsList,i as mqAccountEventsMd,c as mqActivateCardEventsList,h as mqActivateCardEventsMd,u as mqCardActionsEventsList,g as mqCardActionsEventsMd,p as mqCardEventsList,l as mqCardEventsMd,f as mqCardListEventsList,E as mqCardListEventsMd,v as mqExternalAccountListEventsList,C as mqExternalAccountListEventsMd,T as mqFileDisputeEventsList,A as mqFileDisputeEventsMd,q as mqLinkExternalCardEventsList,w as mqLinkExternalCardEventsMd,S as mqOnboardAccountHolderEventsList,R as mqOnboardAccountHolderEventsMd,L as mqReplaceCardEventsList,y as mqReplaceCardEventsMd,k as mqRevealPinEventsList,O as mqRevealPinEventsMd,D as mqSetPinEventsList,I as mqSetPinEventsMd,N as mqStatementListEventsList,P as mqStatementListEventsMd,_ as mqTransactionEventsList,U as mqTransactionEventsMd,H as mqTransactionListEventsList,x as mqTransactionListEventsMd,F as mqTransferFundsEventsList,V as mqTransferFundsEventsMd,M as webSdkVersion};
//# sourceMappingURL=index.esm.js.map